#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
CSV to VCD converter
Code written by Piotr D. Kaczorowski
"""

import csv
import sys
import os
from vcd import VCDWriter

def csv_to_vcd(csv_filename, vcd_filename, timescale='1 us', hierarchy_prefix='', selected_signals=None):
    # Normalize hierarchy prefix
    if hierarchy_prefix and not hierarchy_prefix.startswith('/'):
        hierarchy_prefix = '/' + hierarchy_prefix
    if hierarchy_prefix.endswith('/'):
        hierarchy_prefix = hierarchy_prefix[:-1]

    with open(csv_filename, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        all_signals = reader.fieldnames[1:]  # skip "Time [s]"
        signals = selected_signals if selected_signals else all_signals
        ids = [chr(i) for i in range(33, 33 + len(signals))]

        with open(vcd_filename, 'w') as vcdfile:
            with VCDWriter(vcdfile, timescale=timescale, date='today', comment='CSV to VCD conversion') as writer:
                signal_vars = {}
                for name, id_ in zip(signals, ids):
                    full_name = hierarchy_prefix + '/' + name if hierarchy_prefix else name
                    signal_vars[name] = writer.register_var('top', full_name, 'reg', size=1)

                csvfile.seek(0)
                reader = csv.DictReader(csvfile)

                for row in reader:
                    time_s = float(row['Time [s]'])

                    scale_num = int(''.join(filter(str.isdigit, timescale)))
                    scale_unit = ''.join(filter(str.isalpha, timescale)).lower()

                    if scale_unit == 'ps':
                        time_vcd = int(time_s * 1e12 / scale_num)
                    elif scale_unit == 'ns':
                        time_vcd = int(time_s * 1e9 / scale_num)
                    elif scale_unit == 'us':
                        time_vcd = int(time_s * 1e6 / scale_num)
                    elif scale_unit == 'ms':
                        time_vcd = int(time_s * 1e3 / scale_num)
                    else:
                        time_vcd = int(time_s * 1e6)

                    for name in signals:
                        value = row[name]
                        writer.change(signal_vars[name], time_vcd, int(value))

def print_usage():
    print("Usage: csv2vcd [-t TIMESCALE] [-h HIERARCHY] [-so] input.csv [output.vcd]")
    print("Example timescale values: 1us, 10ps, 100ns")
    print("Example hierarchy values: UUT, /UUT/core, etc.")
    print("If -so is used, output.vcd is not required and files will be named <signal>.vcd.")

if __name__ == '__main__':
    args = sys.argv[1:]
    timescale = '1 us'
    hierarchy_prefix = ''
    split_output = False

    # Parse options
    i = 0
    while i < len(args):
        if args[i] == '-t':
            if i + 1 < len(args):
                timescale = args[i + 1]
                del args[i:i+2]
            else:
                print("Error: -t requires an argument")
                print_usage()
                sys.exit(1)
        elif args[i] == '-h':
            if i + 1 < len(args):
                hierarchy_prefix = args[i + 1]
                del args[i:i+2]
            else:
                print("Error: -h requires an argument")
                print_usage()
                sys.exit(1)
        elif args[i] == '-so':
            split_output = True
            del args[i]
        else:
            i += 1

    if (not split_output and len(args) != 2) or (split_output and len(args) != 1):
        print_usage()
        sys.exit(1)

    csv_filename = args[0]

    if split_output:
        # Read signal names from header
        with open(csv_filename, newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            all_signals = reader.fieldnames[1:]

        for signal in all_signals:
            output_filename = signal.lower() + '.vcd'
            csv_to_vcd(csv_filename, output_filename, timescale, hierarchy_prefix, selected_signals=[signal])
            print(f"Wrote {output_filename}")
    else:
        output_filename = args[1]
        csv_to_vcd(csv_filename, output_filename, timescale, hierarchy_prefix)

